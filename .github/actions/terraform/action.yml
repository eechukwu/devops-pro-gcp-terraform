name: 'Terraform Actions'
description: 'Run Terraform commands'
inputs:
  gcp_sa_key:
    description: 'GCP Service Account Key'
    required: true
  working_directory:
    description: 'Terraform working directory'
    required: true
    default: 'terraform/environments/dev'
  command:
    description: 'Terraform command to run (apply, destroy, or unlock)'
    required: true
  unlock_id:
    description: 'Terraform state lock ID (required for unlock command)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Cache Terraform Modules and Plugins
      uses: actions/cache@v2
      with:
        path: |
          .terraform/modules
          .terraform/providers
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.gcp_sa_key }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      run: terraform -chdir=${{ inputs.working_directory }} init -reconfigure
      shell: bash

    - name: Validate Terraform Configuration
      run: terraform -chdir=${{ inputs.working_directory }} validate
      shell: bash

    - name: Plan Terraform Changes
      run: terraform -chdir=${{ inputs.working_directory }} plan
      shell: bash

    - name: Apply Terraform Changes
      if: ${{ inputs.command == 'apply' }}
      run: terraform -chdir=${{ inputs.working_directory }} apply -auto-approve
      shell: bash

    - name: Destroy Terraform Infrastructure
      if: ${{ inputs.command == 'destroy' }}
      run: terraform -chdir=${{ inputs.working_directory }} destroy -auto-approve
      shell: bash

    - name: Unlock Terraform State
      if: ${{ inputs.command == 'unlock' && inputs.unlock_id != '' }}
      run: terraform -chdir=${{ inputs.working_directory }} force-unlock ${{ inputs.unlock_id }}
      shell: bash
