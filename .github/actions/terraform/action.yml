name: 'Terraform Actions'
description: 'Run Terraform commands'
inputs:
  gcp_sa_key:
    description: 'GCP Service Account Key'
    required: true
  working_directory:
    description: 'Terraform working directory'
    required: true
    default: 'terraform/environments/dev'
  command:
    description: 'Terraform command to run (apply, destroy, or unlock)'
    required: true
  unlock_id:
    description: 'Terraform state lock ID (required for unlock command)'
    required: false
    default: ''
  module_name:
    description: 'Specific Terraform module to target'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.gcp_sa_key }}

    - name: Setup Terraform (Version 1.3)
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "1.3"  # Specifying Terraform version 1.3

    - name: Initialize Terraform
      run: terraform -chdir=${{ inputs.working_directory }} init -reconfigure
      shell: bash

    - name: Validate Terraform Configuration
      run: terraform -chdir=${{ inputs.working_directory }} validate
      shell: bash

    - name: Plan Terraform Changes
      run: terraform -chdir=${{ inputs.working_directory }} plan
      shell: bash
      
    - name: Apply or Destroy Terraform Changes
      if: ${{ (inputs.command == 'apply' || inputs.command == 'destroy') && inputs.module_name == '' }}
      run: terraform -chdir=${{ inputs.working_directory }} ${{ inputs.command }} -auto-approve
      shell: bash

    - name: Apply or Destroy Specific Terraform Module
      if: ${{ (inputs.command == 'apply' || inputs.command == 'destroy') && inputs.module_name != '' }}
      run: terraform -chdir=${{ inputs.working_directory }} ${{ inputs.command }} -auto-approve -target=module.${{ inputs.module_name }}
      shell: bash

    - name: Unlock Terraform State
      if: ${{ inputs.command == 'unlock' && inputs.unlock_id != '' }}
      run: terraform -chdir=${{ inputs.working_directory }} force-unlock ${{ inputs.unlock_id }}
      shell: bash
